{{>partial_header}}
package {{packageName}}

{{#operations}}
import (
	"net/http"
	"net/url"
	"strings"
	"golang.org/x/net/context"
	"github.com/satori/go.uuid"
{{#imports}}	"{{import}}"
{{/imports}}
)

// Linger please
var (
	_ context.Context
)

type {{classname}}Service service
{{#operation}}

/** {{{classname}}}Service{{#summary}} {{.}}{{/summary}}{{#notes}}
{{notes}}{{/notes}}
 * @param ctx context.Context for authentication, logging, tracing, etc.
 * @param params {{#vendorExtensions.x-json-rpc}}{{params}}{{/vendorExtensions.x-json-rpc}}
 * @return *{{#vendorExtensions.x-json-rpc}}{{result}}{{/vendorExtensions.x-json-rpc}}, *http.Response, *ModelError
 */
func (a *{{{classname}}}Service) {{{nickname}}}(ctx context.Context{{#hasParams}}, {{/hasParams}}params {{#vendorExtensions.x-json-rpc}}*{{params}}{{/vendorExtensions.x-json-rpc}}{{#hasOptionalParams}}, localVarOptionals map[string]interface{}{{/hasOptionalParams}}) (*{{#vendorExtensions.x-json-rpc}}{{result}}{{/vendorExtensions.x-json-rpc}}, *http.Response, *ModelError) {
	var (
		localVarHttpMethod = strings.ToUpper("{{httpMethod}}")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		errorPayload 	   ErrorResponse	
{{#returnType}}
		successPayload     {{#vendorExtensions.x-json-rpc}}{{result}}{{/vendorExtensions.x-json-rpc}}
{{/returnType}}
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	{{#allParams}}
	{{^required}}
	{{#isPrimitiveType}}
	if err := typeCheckParameter(localVarOptionals["{{paramName}}"], "{{{dataType}}}", "{{paramName}}"); err != nil {
		return &successPayload, nil, createError(-100, err.Error())
	}
	{{/isPrimitiveType}}
	{{/required}}
	{{#required}}
	{{#minItems}}
	if len({{paramName}}) < {{minItems}} {
		return &successPayload, nil, createError(-100, reportError("{{paramName}} must have at least {{minItems}} elements"))
	}
	{{/minItems}}
	{{#maxItems}}
	if len({{paramName}}) > {{maxItems}} {
		return &successPayload, nil, createError(-100, reportError("{{paramName}} must have less than {{maxItems}} elements"))
	}
	{{/maxItems}}
	{{#minLength}}
	if strlen({{paramName}}) < {{minLength}} {
		return &successPayload, nil, createError(-100, reportError("{{paramName}} must have at least {{minLength}} elements"))
	}
	{{/minLength}}
	{{#maxLength}}
	if strlen({{paramName}}) > {{maxLength}} {
		return &successPayload, nil, createError(-100, reportError("{{paramName}} must have less than {{maxLength}} elements"))
	}
	{{/maxLength}}
	{{#minimum}}
	{{#isString}}
	{{paramName}}Txt, err := atoi({{paramName}})
	if {{paramName}}Txt < {{minimum}} {
	{{/isString}}
	{{^isString}}
	if {{paramName}} < {{minimum}} {
	{{/isString}}
		return &successPayload, nil, createError(-100, reportError("{{paramName}} must be greater than {{minimum}}"))
	}
	{{/minimum}}
	{{#maximum}}
	{{#isString}}
	{{paramName}}Txt, err := atoi({{paramName}})
	if {{paramName}}Txt > {{maximum}} {
	{{/isString}}
	{{^isString}}
	if {{paramName}} > {{maximum}} {
	{{/isString}}
		return &successPayload, nil, createError(-100, reportError("{{paramName}} must be less than {{maximum}}"))
	}
	{{/maximum}}
	{{/required}}
	{{/allParams}}

	{{#hasQueryParams}}
	{{#queryParams}}
	{{#required}}
	localVarQueryParams.Add("{{baseName}}", parameterToString({{paramName}}, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
	{{/required}}
	{{^required}}
	if localVarTempParam, localVarOk := localVarOptionals["{{paramName}}"].({{dataType}}); localVarOk {
		localVarQueryParams.Add("{{baseName}}", parameterToString(localVarTempParam, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
	}
	{{/required}}
	{{/queryParams}}
	{{/hasQueryParams}}
	// to determine the Content-Type header
{{=<% %>=}}
	localVarHttpContentTypes := []string{<%#consumes%>"<%&mediaType%>"<%^-last%>, <%/-last%><%/consumes%>}
<%={{ }}=%>

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
{{=<% %>=}}
	localVarHttpHeaderAccepts := []string{<%#produces%>"<%&mediaType%>"<%^-last%>, <%/-last%><%/produces%>}
<%={{ }}=%>

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
{{#hasHeaderParams}}
{{#headerParams}}
	{{#required}}
	localVarHeaderParams["{{baseName}}"] = parameterToString({{paramName}}, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}")
	{{/required}}
	{{^required}}
	if localVarTempParam, localVarOk := localVarOptionals["{{paramName}}"].({{dataType}}); localVarOk {
		localVarHeaderParams["{{baseName}}"] = parameterToString(localVarTempParam, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}")
	}
	{{/required}}
{{/headerParams}}
{{/hasHeaderParams}}
{{#hasFormParams}}
{{#formParams}}
{{#isFile}}
{{^required}}
	var localVarFile ({{dataType}})
	if localVarTempParam, localVarOk := localVarOptionals["{{paramName}}"].({{dataType}}); localVarOk {
		localVarFile = localVarTempParam
	}
{{/required}}
	if localVarFile != nil {
		fbs, _ := ioutil.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
{{/isFile}}
{{^isFile}}
{{#required}}
	localVarFormParams.Add("{{baseName}}", parameterToString({{paramName}}, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
{{/required}}
{{^required}}
	if localVarTempParam, localVarOk := localVarOptionals["{{paramName}}"].({{dataType}}); localVarOk {
		localVarFormParams.Add("{{baseName}}", parameterToString(localVarTempParam, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
	}
{{/required}}
{{/isFile}}
{{/formParams}}
{{/hasFormParams}}
{{#hasBodyParam}}
{{#bodyParams}}	// body params
{{#required}}
	localVarPostBody = &{{dataType}}{
		Method: strings.Replace("{{{path}}}", "/", "", -1),
		Params: params,
		Id: uuid.NewV4().String(),
		Jsonrpc: "2.0",
	}	
{{/required}}
{{^required}}
	if localVarTempParam, localVarOk := localVarOptionals["{{paramName}}"].({{dataType}}); localVarOk {
		localVarPostBody = &localVarTempParam
	}
{{/required}}
{{/bodyParams}}
{{/hasBodyParam}}
{{#authMethods}}
{{#isApiKey}}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			{{#isKeyInHeader}}localVarHeaderParams["{{keyParamName}}"] = key{{/isKeyInHeader}}{{#isKeyInQuery}}localVarQueryParams.Add("{{keyParamName}}", key){{/isKeyInQuery}}
		}
	}
{{/isApiKey}}
{{/authMethods}}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return &successPayload, nil, createError(-100, err.Error())
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return &successPayload, localVarHttpResponse, createError(-100, err.Error())
	}
	defer localVarHttpResponse.Body.Close()
	bodyBytes, _ := ioutil.ReadAll(localVarHttpResponse.Body)
	if localVarHttpResponse.StatusCode >= 300 {
		errorPayload = ErrorResponse{}
		if err = json.Unmarshal(bodyBytes, &errorPayload); err != nil {
			return &successPayload, localVarHttpResponse, createError(-100, fmt.Sprintf("Unmarschal error payload failed: %s", err.Error()))
		}

		return &successPayload, localVarHttpResponse, errorPayload.Error_
	}
	rpcResponse := {{returnType}}{} 
{{#returnType}}
	{{#withXml}}
	contentType := localVarHttpResponse.Header.Get("content-type")
	if strings.Contains(contentType, "application/xml") {
		if err = xml.NewDecoder(localVarHttpResponse.Body).Decode(&rpcResponse); err != nil {
			return &successPayload, localVarHttpResponse, createError(-100, fmt.Sprintf("Unmarschal success payload failed: %s", err.Error()))
		}

		return &successPayload, localVarHttpResponse, bil
	}
	{{/withXml}}

	if err = json.Unmarshal(bodyBytes, &successPayload); err != nil {
		return &successPayload, localVarHttpResponse, createError(-100, fmt.Sprintf("Unmarschal success payload failed: %s", err.Error()))
	}

{{/returnType}}
	return rpcResponse.Result, localVarHttpResponse, nil
}
{{/operation}}{{/operations}}

func createError(code int32, message string) *ModelError {
	return &ModelError{
		Code: code,
		Message: message,
	}
}
